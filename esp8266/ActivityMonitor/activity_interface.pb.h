/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_ESP8266ALERT_ACTIVITY_INTERFACE_PB_H_INCLUDED
#define PB_ESP8266ALERT_ACTIVITY_INTERFACE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Esp8266Alert_AlertThresholdCross {
    int64_t crossed_thresh;
/* @@protoc_insertion_point(struct:Esp8266Alert_AlertThresholdCross) */
} Esp8266Alert_AlertThresholdCross;


/* Initializer values for message structs */
#define Esp8266Alert_AlertThresholdCross_init_default {0}
#define Esp8266Alert_AlertThresholdCross_init_zero {0}

/* Field tags (for use in manual encoding/decoding) */
#define Esp8266Alert_AlertThresholdCross_crossed_thresh_tag 1

/* Struct field encoding specification for nanopb */
#define Esp8266Alert_AlertThresholdCross_FIELDLIST(X, a) \
X(a, STATIC, REQUIRED, INT64, crossed_thresh, 1)
#define Esp8266Alert_AlertThresholdCross_CALLBACK NULL
#define Esp8266Alert_AlertThresholdCross_DEFAULT NULL

extern const pb_msgdesc_t Esp8266Alert_AlertThresholdCross_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Esp8266Alert_AlertThresholdCross_fields &Esp8266Alert_AlertThresholdCross_msg

/* Maximum encoded size of messages (where known) */
#define Esp8266Alert_AlertThresholdCross_size    11

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
